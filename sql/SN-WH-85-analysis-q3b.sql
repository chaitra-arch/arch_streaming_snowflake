
create or replace transient table {db_name}.{sc_name}.MONITOR_AND_ANALYS_WH_STEP_THREE_B AS-- IDRC_SBX_IDROM.CMS_WORK_COMM_PRD.MONITOR_AND_ANALYS_WH_STEP_THREE_B AS
WITH
CTE_QH AS (
    SELECT START_TIME
          ,END_TIME
          ,TOTAL_ELAPSED_TIME - (LIST_EXTERNAL_FILES_TIME+COMPILATION_TIME+QUEUED_PROVISIONING_TIME+QUEUED_REPAIR_TIME+QUEUED_OVERLOAD_TIME+TRANSACTION_BLOCKED_TIME) AS WH_TIME
          ,DATEADD(MILLISECOND, -WH_TIME, END_TIME) AS START_TIME_WH
          ,WAREHOUSE_ID
          ,WAREHOUSE_NAME
          ,WAREHOUSE_SIZE
          ,WAREHOUSE_TYPE
          ,CLUSTER_NUMBER
          ,QUERY_TAG
          ,SESSION_ID
          ,USER_NAME
          ,ROLE_NAME
          ,DATABASE_ID
          ,DATABASE_NAME
          ,SCHEMA_ID
          ,SCHEMA_NAME
          ,QUERY_TYPE
          ,EXECUTION_STATUS
          ,ERROR_CODE
          ,ERROR_MESSAGE
      FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
     WHERE CLUSTER_NUMBER IS NOT NULL
        AND execution_status = 'SUCCESS'
		AND warehouse_size IS NOT NULL
		AND end_time -- >= dateadd(MONTH,-1,CURRENT_DATE()) -- 
        BETWEEN'{start_date}' AND '{end_date}' -- end_time > dateadd(MONTH,-1,CURRENT_DATE())
        and TOTAL_ELAPSED_TIME > 0 
        and query_type in ('COPY', 'INSERT', 'MERGE', 'UNLOAD', 'RECLUSTER','SELECT','DELETE', 'CREATE_TABLE_AS_SELECT', 'UPDATE')
         AND WAREHOUSE_SIZE IS NOT NULL
         AND WAREHOUSE_SIZE NOT IN ('X-Small', 'Small', 'Medium') -- Discarding 'LIGHT' WH Sizes
       --AND START_TIME >= DATEADD(HOUR, -1, $START_TIME_MIN)
       --AND START_TIME < $START_TIME_MAX
       
       --AND warehouse_name = $WAREHOUSE_NAME_IN --and warehouse_size = 'X-Large'
       --AND TOTAL_ELAPSED_TIME <= (1000 * 60 * 5) -- 5 minute or less // 20: 5913 // 5: 5906 // 1m: 5781
  )
  ,
  CTE_WMH AS (
    SELECT --*,
            START_TIME
          ,END_TIME
          ,WAREHOUSE_ID
          ,WAREHOUSE_NAME
          ,CREDITS_USED_COMPUTE
      FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
     WHERE  end_time -- >=  dateadd(MONTH,-1,CURRENT_DATE())
            BETWEEN '{start_date}' AND '{end_date}' -- >=  dateadd(MONTH,-1,CURRENT_DATE()) -- BETWEEN'{start_date}' AND '{end_date}'--
    --START_TIME >= $START_TIME_MIN AND START_TIME < $START_TIME_MAX
       --AND warehouse_name = $WAREHOUSE_NAME_IN --and warehouse_size = 'X-Large'
  )
  ,CTE_OVERLAP AS (
    SELECT WMH.WAREHOUSE_ID
          ,WMH.WAREHOUSE_NAME
          ,GREATEST(WMH.START_TIME, IFNULL(QH.START_TIME_WH, WMH.START_TIME)) AS START_TIME_SEGMENT
          ,LEAST(WMH.END_TIME, IFNULL(QH.END_TIME, WMH.END_TIME)) AS END_TIME_SEGMENT
          ,WMH.CREDITS_USED_COMPUTE * 
             (
               DATEDIFF(MILLISECOND, START_TIME_SEGMENT, END_TIME_SEGMENT) / 
               SUM(DATEDIFF(MILLISECOND, START_TIME_SEGMENT, END_TIME_SEGMENT)) OVER (PARTITION BY WMH.WAREHOUSE_ID, WMH.START_TIME)
             ) AS SEGMENT_CREDITS
          ,QH.WAREHOUSE_SIZE
          ,QH.WAREHOUSE_TYPE
          ,QH.CLUSTER_NUMBER
          ,QH.QUERY_TAG
          ,QH.SESSION_ID
          ,QH.USER_NAME
          ,QH.ROLE_NAME
          ,QH.DATABASE_ID
          ,QH.DATABASE_NAME
          ,QH.SCHEMA_ID
          ,QH.SCHEMA_NAME
          ,QH.QUERY_TYPE
          ,QH.EXECUTION_STATUS
          ,QH.ERROR_CODE
          ,QH.ERROR_MESSAGE
      FROM CTE_WMH WMH
           LEFT JOIN CTE_QH QH
             ON WMH.WAREHOUSE_ID = QH.WAREHOUSE_ID
            AND WMH.START_TIME < QH.END_TIME
            AND QH.START_TIME_WH < WMH.END_TIME
  )
  --,CTE_CREDIT_RESULT AS
  --(
  SELECT WAREHOUSE_NAME, WAREHOUSE_SIZE, --CLUSTER_NUMBER, 
  SUM(SEGMENT_CREDITS) /2 as SAVING_CREDITS_SIZE_DOWN -- Going Down by ONE Size
  --*
    FROM CTE_OVERLAP
    WHERE WAREHOUSE_SIZE IS NOT NULL
    GROUP BY WAREHOUSE_NAME, WAREHOUSE_SIZE--, CLUSTER_NUMBER
    HAVING SAVING_CREDITS_SIZE_DOWN > 0
    --ORDER BY SAVING_CREDITS_SIZE_DOWN_1minBKT DESC, WAREHOUSE_NAME 
;